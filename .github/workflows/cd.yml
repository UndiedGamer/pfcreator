name: Continuous Delivery

on:
  release:
    types: [created]

env:
  ZIG_VERSION: 0.13.0
  CARGO_TERM_COLOR: always

jobs:
  build-and-publish:
    name: Build and Publish (${{ matrix.os }}-${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            arch: x64
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            arch: arm64
            target: aarch64-unknown-linux-gnu
          # Windows builds
          - os: windows-latest
            arch: x64
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            arch: arm64
            target: aarch64-pc-windows-msvc
          # macOS builds
          - os: macos-latest
            arch: x64
            target: x86_64-apple-darwin
          - os: macos-latest
            arch: x86
            target: i686-apple-darwin

    steps:
      - uses: actions/checkout@v4

      - name: Setup Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: ${{ env.ZIG_VERSION }}

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        
      - name: Zig Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/zig
            zig-cache
          key: zig-${{ matrix.os }}-${{ matrix.arch }}-${{ env.ZIG_VERSION }}

      - name: Build Zig Project
        run: zig build -Doptimize=ReleaseFast -Dtarget=${{ matrix.target }} -freference-trac

      - name: Build Rust Project
        run: cargo build --verbose --release --target ${{ matrix.target }}

      - name: Package Artifacts
        shell: bash
        run: |
          mkdir -p artifacts/${{ matrix.target }}
          if [ "${{ runner.os }}" == "Windows" ]; then
            cp target/${{ matrix.target }}/release/*.exe artifacts/${{ matrix.target }}/
            cp zig-out/bin/*.exe artifacts/${{ matrix.target }}/
          else
            cp target/${{ matrix.target }}/release/* artifacts/${{ matrix.target }}/
            cp zig-out/bin/* artifacts/${{ matrix.target }}/
          fi

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries-${{ matrix.os }}-${{ matrix.arch }}
          path: artifacts/

  publish:
    needs: build-and-publish
    runs-on: ubuntu-latest
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v3
        with:
          path: release-artifacts

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: release-artifacts/**/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to crates.io
        if: success()
        run: cargo publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}